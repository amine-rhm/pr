const jwt = require("jsonwebtoken");
const dotenv = require("dotenv");
dotenv.config();

const auth = (req, res, next) => {
  try {
    let token;
    const authHeader = req.headers.authorization;
    
    if (authHeader && authHeader.startsWith("Bearer")) {
      token = authHeader.split(" ")[1];
    } else {
      // Si aucun token n'est fourni dans l'en-tête Authorization
      return res.status(401).json({ message: "Token non fourni" });
    }

    jwt.verify(token, process.env.jwtSecret, (err, userData) => {
      if (err) {
        // Si le token est invalide
        console.error("Erreur de vérification du token:", err);
        return res.status(401).json({ message: "Token invalide" });
      }
      // Si le token est valide, stocker les données utilisateur dans req.userData
      req.userData = userData;
      next();
    });
  } catch (error) {
    // En cas d'erreur lors de la vérification du token
    console.error("Erreur lors de la vérification du token:", error);
    return res.status(500).json({ message: "Erreur serveur lors de la vérification du token", error: error.message });
  }
};

module.exports = auth;
